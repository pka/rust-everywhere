language: rust
cache: cargo

env:
  global:
    # This will be part of the release tarball
    - PROJECT_NAME=rust-everywhere
    - MAKE_DEB=yes
    - DEB_MAINTAINER="Pirmin Kalberer <pi_deb@sourcepole.ch>"
    - DEB_DESCRIPTION="Rust build test"

# AFAICT There are a few ways to set up the build jobs. This one is not the DRYest but I feel is the
# easiest to reason about.
# NOTE Make *sure* you don't remove a reference (&foo) if you are going to dereference it (*foo)
matrix:
  include:
    # Stable channel
    - os: linux
      rust: stable
      env: TARGET=aarch64-unknown-linux-gnu
      # need Trusty because the glibc in Precise is too old and doesn't support 64-bit arm
      dist: trusty
      sudo: required
      # Extra packages only for this job
      addons:
        apt:
          packages: &aarch64_unknown_linux_gnu
            # Transparent emulation
            - qemu-user-static
            - binfmt-support
    # - os: linux
    #   rust: stable
    #   env: TARGET=armv7-unknown-linux-gnueabihf
    #   # sudo is needed for binfmt_misc, which is needed for transparent user qemu emulation
    #   sudo: required
    #   addons:
    #     apt:
    #       packages: &armv7_unknown_linux_gnueabihf
    #         # Cross compiler and cross compiled C libraries
    #         - gcc-arm-linux-gnueabihf
    #         - libc6-armhf-cross
    #         - libc6-dev-armhf-cross
    #         # Transparent emulation
    #         - qemu-user-static
    #         - binfmt-support
    # - os: osx
    #   rust: stable
    #   env: TARGET=i686-apple-darwin
    # - os: linux
    #   rust: stable
    #   env: TARGET=i686-unknown-linux-gnu
    #   addons:
    #     apt:
    #       packages: &i686_unknown_linux_gnu
    #         # Cross compiler and cross compiled C libraries
    #         - gcc-multilib
    # - os: linux
    #   rust: stable
    #   env: TARGET=i686-unknown-linux-musl
    # - os: osx
    #   rust: stable
    #   env: TARGET=x86_64-apple-darwin
    # - os: linux
    #   rust: stable
    #   env: TARGET=x86_64-unknown-linux-gnu
    # - os: linux
    #   rust: stable
    #   env: TARGET=x86_64-unknown-linux-musl
    # # Beta channel
    # - os: linux
    #   rust: beta
    #   env: TARGET=aarch64-unknown-linux-gnu
    #   dist: trusty
    #   sudo: required
    #   addons:
    #     apt:
    #       packages: *aarch64_unknown_linux_gnu
    # - os: linux
    #   rust: beta
    #   env: TARGET=armv7-unknown-linux-gnueabihf
    #   sudo: required
    #   addons:
    #     apt:
    #       # Use the same packages the stable version uses
    #       packages: *armv7_unknown_linux_gnueabihf
    # - os: osx
    #   rust: beta
    #   env: TARGET=i686-apple-darwin
    # - os: linux
    #   rust: beta
    #   env: TARGET=i686-unknown-linux-gnu
    #   addons:
    #     apt:
    #       packages: *i686_unknown_linux_gnu
    # - os: linux
    #   rust: beta
    #   env: TARGET=i686-unknown-linux-musl
    # - os: osx
    #   rust: beta
    #   env: TARGET=x86_64-apple-darwin
    # - os: linux
    #   rust: beta
    #   env: TARGET=x86_64-unknown-linux-gnu
    # - os: linux
    #   rust: beta
    #   env: TARGET=x86_64-unknown-linux-musl
    # # Nightly channel
    # - os: linux
    #   rust: nightly
    #   env: TARGET=aarch64-unknown-linux-gnu
    #   dist: trusty
    #   sudo: required
    #   addons:
    #     apt:
    #       packages: *aarch64_unknown_linux_gnu
    # - os: linux
    #   rust: nightly
    #   env: TARGET=armv7-unknown-linux-gnueabihf
    #   sudo: required
    #   addons:
    #     apt:
    #       # Use the same packages the stable version uses
    #       packages: *armv7_unknown_linux_gnueabihf
    # - os: osx
    #   rust: nightly
    #   env: TARGET=i686-apple-darwin
    # - os: linux
    #   rust: nightly
    #   env: TARGET=i686-unknown-linux-gnu
    #   addons:
    #     apt:
    #       packages: *i686_unknown_linux_gnu
    # - os: linux
    #   rust: nightly
    #   env: TARGET=i686-unknown-linux-musl
    # - os: osx
    #   rust: nightly
    #   env: TARGET=x86_64-apple-darwin
    # - os: linux
    #   rust: nightly
    #   env: TARGET=x86_64-unknown-linux-gnu
    # - os: linux
    #   rust: nightly
    #   env: TARGET=x86_64-unknown-linux-musl
  allow_failures:
    # Target `i686-unknown-linux-musl` is currently only available on the nightly channel
    - os: linux
      rust: stable
      env: TARGET=i686-unknown-linux-musl
    - os: linux
      rust: beta
      env: TARGET=i686-unknown-linux-musl

services:
  - postgresql

before_install:
  - psql -c 'create database travis_ci_test;' -U postgres
  - export PATH="$PATH:$HOME/.cargo/bin"

install:
  - bash ci/install.sh

script:
  - bash ci/script.sh

before_deploy:
  - bash ci/before_deploy.sh

deploy:
  provider: releases
  # How to generate an api_key:
  # - Go to 'https://github.com/settings/tokens/new' and generate a Token with only the
  # `public_repo` scope enabled
  # - Call `travis encrypt $github_token` where $github_token is the token you got in the previous
  # step and `travis` is the official Travis CI gem (see https://rubygems.org/gems/travis/)
  # - Enter the "encrypted value" below
  api_key:
    secure: oGS/64zIyTD7P/frITtqvTmUPVdjHI6FF/fjDrOqBchET+JMkaRIVicjP657KY9V7XaI1JEj4fJ2ApKZJ//nztYAmhWsbcUqyutR4oOeM5pGvEeh+w5trWSE7CIP4IXzPGWgSUY/YODYxzbcXt5E3a7hKDlnKWuAMqtPcu58pEQJyO765XlbX7rXoATWTd33fDNUrOYvmWaFsh8wTPSSBEvL9tdx3+mBUeY17Nzk7lLIFZIucycbL/DN4P6pLjfmUxIueHI1/gvOUE3/JLdix8f8fxGgTvpcu99Axjdg2jiu8QZHIlbJrl2TFOA47ZZqt25vIpW7ip2VRhtejZsW27N0AStAmQO3BksMjbfQ9X94/thJqEBwCkswWfdFrU9l9vJlP5B2bl41AzPgJIdg5t1MS4HhkdBh06xgjDYP3acAuqsVQXIiUD47Yhq3erfLsEh6XQx3cHInNPAtxdK759XDHo+jJtY77j6ndmlEZR2wyXuv5lpe/EeheZoIPDzpcuoAltmkpaK6JSnItrABsjGETD+S+UMO+fx+fuGrSEz4ObYBVm/dx1nXlft/QpVEutU1wBVz4A6dUtQr8GGv7RhududHtRmVmn0PfqjSKhisSdOg4lg8VO45o27ol7sEiqLDm3ZMRf7qznoQMsDf0ZBnGRGYeY0SFWZTkAoKDpg=
  file_glob: true
  file: ${PROJECT_NAME}-${TRAVIS_TAG}-${TARGET}.*
  # don't delete the artifacts from previous phases
  skip_cleanup: true
  # deploy when a new tag is pushed
  on:
    # channel to use to produce the release artifacts
    # NOTE make sure you only release *once* per target
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true

notifications:
  email:
    on_success: never
